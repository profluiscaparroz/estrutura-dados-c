# Makefile para Algoritmos de Ordena√ß√£o
# Compila√ß√£o com flags de otimiza√ß√£o e warnings

CC = gcc
CFLAGS = -Wall -Wextra -std=c99 -O2
TARGET_DIR = bin
SOURCES = $(wildcard *.c)
TARGETS = $(SOURCES:.c=)

# Cores para output
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
NC = \033[0m # No Color

.PHONY: all clean test help run-all benchmark

# Compila todos os algoritmos
all: $(TARGET_DIR) $(addprefix $(TARGET_DIR)/, $(TARGETS))
	@echo "$(GREEN)‚úÖ Todos os algoritmos compilados com sucesso!$(NC)"

# Cria diret√≥rio bin se n√£o existir
$(TARGET_DIR):
	@mkdir -p $(TARGET_DIR)

# Regra gen√©rica para compilar arquivos .c
$(TARGET_DIR)/%: %.c
	@echo "$(BLUE)üî® Compilando $<...$(NC)"
	@$(CC) $(CFLAGS) -o $@ $<

# Executa todos os algoritmos b√°sicos
run-all: all
	@echo "$(YELLOW)üöÄ Executando todos os algoritmos b√°sicos:$(NC)"
	@echo "\n$(GREEN)=== BUBBLE SORT ===$(NC)"
	@$(TARGET_DIR)/bubbleSort
	@echo "\n$(GREEN)=== INSERTION SORT ===$(NC)"
	@$(TARGET_DIR)/insertSort
	@echo "\n$(GREEN)=== SELECTION SORT ===$(NC)"
	@$(TARGET_DIR)/selectSort
	@echo "\n$(GREEN)=== QUICK SORT ===$(NC)"
	@$(TARGET_DIR)/quickSort
	@echo "\n$(GREEN)=== MERGE SORT ===$(NC)"
	@$(TARGET_DIR)/mergeSort

# Executa algoritmos avan√ßados
run-advanced: all
	@echo "$(YELLOW)üöÄ Executando algoritmos avan√ßados:$(NC)"
	@echo "\n$(GREEN)=== HEAP SORT ===$(NC)"
	@$(TARGET_DIR)/heapSort | head -20
	@echo "\n$(GREEN)=== SHELL SORT ===$(NC)"
	@$(TARGET_DIR)/shellSort | head -30
	@echo "\n$(GREEN)=== BUBBLE SORT OTIMIZADO ===$(NC)"
	@$(TARGET_DIR)/bubbleSortOptimized | head -20

# Executa benchmark de performance
benchmark: all
	@echo "$(YELLOW)üìä Executando benchmark de performance:$(NC)"
	@$(TARGET_DIR)/comparacao

# Testa se todos os algoritmos compilam
test: all
	@echo "$(YELLOW)üß™ Testando compila√ß√£o de todos os algoritmos:$(NC)"
	@for algo in $(addprefix $(TARGET_DIR)/, $(TARGETS)); do \
		if [ -x "$$algo" ]; then \
			echo "$(GREEN)‚úÖ $$algo - OK$(NC)"; \
		else \
			echo "$(RED)‚ùå $$algo - FALHOU$(NC)"; \
		fi; \
	done

# Compila apenas algoritmos b√°sicos
basic: $(TARGET_DIR) $(TARGET_DIR)/bubbleSort $(TARGET_DIR)/insertSort $(TARGET_DIR)/selectSort $(TARGET_DIR)/quickSort $(TARGET_DIR)/mergeSort
	@echo "$(GREEN)‚úÖ Algoritmos b√°sicos compilados!$(NC)"

# Compila apenas algoritmos avan√ßados
advanced: $(TARGET_DIR) $(TARGET_DIR)/heapSort $(TARGET_DIR)/shellSort $(TARGET_DIR)/bubbleSortOptimized
	@echo "$(GREEN)‚úÖ Algoritmos avan√ßados compilados!$(NC)"

# Compila ferramentas
tools: $(TARGET_DIR) $(TARGET_DIR)/comparacao
	@echo "$(GREEN)‚úÖ Ferramentas compiladas!$(NC)"

# Executa testes de corretude
test-correctness: all
	@echo "$(YELLOW)üîç Testando corretude dos algoritmos:$(NC)"
	@echo "$(BLUE)Testando com array [5,2,8,1,9] - resultado esperado: [1,2,5,8,9]$(NC)"
	@echo "Bubble Sort:" && echo "5 2 8 1 9" | $(TARGET_DIR)/bubbleSort 2>/dev/null || true
	@echo "Quick Sort:" && echo "5 2 8 1 9" | $(TARGET_DIR)/quickSort 2>/dev/null || true

# Debug - compila com flags de debug
debug: CFLAGS = -Wall -Wextra -std=c99 -g -DDEBUG
debug: all
	@echo "$(YELLOW)üêõ Compilado em modo debug$(NC)"

# Release - compila com m√°xima otimiza√ß√£o
release: CFLAGS = -Wall -Wextra -std=c99 -O3 -DNDEBUG
release: all
	@echo "$(GREEN)üöÄ Compilado em modo release$(NC)"

# Limpa arquivos compilados
clean:
	@echo "$(RED)üßπ Limpando arquivos compilados...$(NC)"
	@rm -rf $(TARGET_DIR)
	@rm -f *.o
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da!$(NC)"

# Mostra informa√ß√µes dos algoritmos
info:
	@echo "$(BLUE)üìö Algoritmos de Ordena√ß√£o Dispon√≠veis:$(NC)"
	@echo ""
	@echo "$(GREEN)Algoritmos B√°sicos:$(NC)"
	@echo "  ‚Ä¢ bubbleSort      - O(n¬≤) - Bubble Sort cl√°ssico"
	@echo "  ‚Ä¢ insertSort      - O(n¬≤) - Insertion Sort"
	@echo "  ‚Ä¢ selectSort      - O(n¬≤) - Selection Sort"
	@echo "  ‚Ä¢ quickSort       - O(n log n) - Quick Sort"
	@echo "  ‚Ä¢ mergeSort       - O(n log n) - Merge Sort"
	@echo ""
	@echo "$(GREEN)Algoritmos Avan√ßados:$(NC)"
	@echo "  ‚Ä¢ heapSort        - O(n log n) - Heap Sort"
	@echo "  ‚Ä¢ shellSort       - O(n^1.5) - Shell Sort"
	@echo "  ‚Ä¢ bubbleSortOptimized - O(n¬≤) - Bubble Sort otimizado"
	@echo ""
	@echo "$(GREEN)Ferramentas:$(NC)"
	@echo "  ‚Ä¢ comparacao      - Benchmark de performance"
	@echo ""
	@echo "$(YELLOW)Para compilar todos: make all$(NC)"
	@echo "$(YELLOW)Para executar todos: make run-all$(NC)"
	@echo "$(YELLOW)Para benchmark: make benchmark$(NC)"

# Help - mostra comandos dispon√≠veis
help:
	@echo "$(BLUE)üîß Comandos Dispon√≠veis:$(NC)"
	@echo ""
	@echo "$(GREEN)Compila√ß√£o:$(NC)"
	@echo "  make all          - Compila todos os algoritmos"
	@echo "  make basic        - Compila apenas algoritmos b√°sicos"
	@echo "  make advanced     - Compila algoritmos avan√ßados"
	@echo "  make tools        - Compila ferramentas"
	@echo "  make debug        - Compila em modo debug"
	@echo "  make release      - Compila otimizado para release"
	@echo ""
	@echo "$(GREEN)Execu√ß√£o:$(NC)"
	@echo "  make run-all      - Executa algoritmos b√°sicos"
	@echo "  make run-advanced - Executa algoritmos avan√ßados"
	@echo "  make benchmark    - Executa benchmark de performance"
	@echo ""
	@echo "$(GREEN)Testes:$(NC)"
	@echo "  make test         - Testa se todos compilam"
	@echo "  make test-correctness - Testa corretude dos algoritmos"
	@echo ""
	@echo "$(GREEN)Utilidades:$(NC)"
	@echo "  make info         - Mostra informa√ß√µes dos algoritmos"
	@echo "  make clean        - Remove arquivos compilados"
	@echo "  make help         - Mostra esta ajuda"

# Target padr√£o
.DEFAULT_GOAL := help